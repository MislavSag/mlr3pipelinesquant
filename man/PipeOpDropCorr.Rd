% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpDropCorr.R
\name{PipeOpDropCorr}
\alias{PipeOpDropCorr}
\title{PipeOpDropCorr}
\description{
\code{PipeOpDropCorr} is an R6 class inheriting from \code{PipeOpTaskPreprocSimple}. It filters out
features from a dataset that are highly correlated with each other, based on a specified
correlation threshold.
}
\section{Construction}{


\if{html}{\out{<div class="sourceCode">}}\preformatted{PipeOpDropCorr$new(id = "drop.corr", param_vals = list())
}\if{html}{\out{</div>}}
\itemize{
\item \code{id} :: \code{character(1)}\cr
Identifier of resulting object, default \code{"drop.corr"}.
\item \code{param_vals} :: named \code{list}\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would otherwise be set during construction. Default \code{list()}.
}
}

\section{Parameters}{

The parameters are:
\itemize{
\item \code{use} :: \code{character(1)}\cr
Method for handling missing values in correlation computation. Default is \code{"everything"}.
\item \code{method} :: \code{character(1)}\cr
Correlation method, one of \code{"pearson"}, \code{"kendall"}, or \code{"spearman"}. Default is \code{"pearson"}.
\item \code{cutoff} :: \code{numeric(1)}\cr
The cutoff threshold for correlation. Features with a correlation higher than this value are dropped. Default is 0.99.
}
}

\section{Input and Output Channels}{

Input and output channels are inherited from \code{PipeOpTaskPreprocSimple}.

The output is the input \code{\link[mlr3:Task]{Task}} with highly correlated features removed.
}

\section{State}{

The \verb{$state} is a named \code{list} containing:
\itemize{
\item \code{cnames} :: \code{character}\cr
The names of the columns that are retained (i.e., those with correlation below \code{cutoff}).
}
}

\section{Internals}{

The operator calculates a correlation matrix and removes features that are highly correlated,
as defined by the \code{cutoff} parameter. The correlation method and handling of missing values
are determined by the \code{method} and \code{use} parameters, respectively.
}

\section{Methods}{

Methods inherited from \code{PipeOpTaskPreprocSimple}.
}

\examples{
library("mlr3")

task = tsk("iris")
po_drop_corr = PipeOpDropCorr$new()

po_drop_corr$train(list(task))[[1]]$data()

}
\seealso{
Other PipeOps: 
\code{\link{PipeOpDropNACol}},
\code{\link{PipeOpDropNA}},
\code{\link{PipeOpEnsemble}},
\code{\link{PipeOpImpute}},
\code{\link{PipeOpTargetTrafo}},
\code{\link{PipeOpTaskPreprocSimple}},
\code{\link{PipeOpTaskPreproc}},
\code{\link{PipeOpUniform}},
\code{\link{PipeOpWinsorizeSimple}},
\code{\link{PipeOp}},
\code{\link{mlr_pipeops_boxcox}},
\code{\link{mlr_pipeops_branch}},
\code{\link{mlr_pipeops_chunk}},
\code{\link{mlr_pipeops_classbalancing}},
\code{\link{mlr_pipeops_classifavg}},
\code{\link{mlr_pipeops_classweights}},
\code{\link{mlr_pipeops_colapply}},
\code{\link{mlr_pipeops_collapsefactors}},
\code{\link{mlr_pipeops_colroles}},
\code{\link{mlr_pipeops_copy}},
\code{\link{mlr_pipeops_datefeatures}},
\code{\link{mlr_pipeops_encodeimpact}},
\code{\link{mlr_pipeops_encodelmer}},
\code{\link{mlr_pipeops_encode}},
\code{\link{mlr_pipeops_featureunion}},
\code{\link{mlr_pipeops_filter}},
\code{\link{mlr_pipeops_fixfactors}},
\code{\link{mlr_pipeops_histbin}},
\code{\link{mlr_pipeops_ica}},
\code{\link{mlr_pipeops_imputeconstant}},
\code{\link{mlr_pipeops_imputehist}},
\code{\link{mlr_pipeops_imputelearner}},
\code{\link{mlr_pipeops_imputemean}},
\code{\link{mlr_pipeops_imputemedian}},
\code{\link{mlr_pipeops_imputemode}},
\code{\link{mlr_pipeops_imputeoor}},
\code{\link{mlr_pipeops_imputesample}},
\code{\link{mlr_pipeops_kernelpca}},
\code{\link{mlr_pipeops_learner}},
\code{\link{mlr_pipeops_missind}},
\code{\link{mlr_pipeops_modelmatrix}},
\code{\link{mlr_pipeops_multiplicityexply}},
\code{\link{mlr_pipeops_multiplicityimply}},
\code{\link{mlr_pipeops_mutate}},
\code{\link{mlr_pipeops_nmf}},
\code{\link{mlr_pipeops_nop}},
\code{\link{mlr_pipeops_ovrsplit}},
\code{\link{mlr_pipeops_ovrunite}},
\code{\link{mlr_pipeops_pca}},
\code{\link{mlr_pipeops_proxy}},
\code{\link{mlr_pipeops_quantilebin}},
\code{\link{mlr_pipeops_randomprojection}},
\code{\link{mlr_pipeops_randomresponse}},
\code{\link{mlr_pipeops_regravg}},
\code{\link{mlr_pipeops_removeconstants}},
\code{\link{mlr_pipeops_renamecolumns}},
\code{\link{mlr_pipeops_replicate}},
\code{\link{mlr_pipeops_scalemaxabs}},
\code{\link{mlr_pipeops_scalerange}},
\code{\link{mlr_pipeops_scale}},
\code{\link{mlr_pipeops_select}},
\code{\link{mlr_pipeops_smote}},
\code{\link{mlr_pipeops_spatialsign}},
\code{\link{mlr_pipeops_subsample}},
\code{\link{mlr_pipeops_targetinvert}},
\code{\link{mlr_pipeops_targetmutate}},
\code{\link{mlr_pipeops_targettrafoscalerange}},
\code{\link{mlr_pipeops_textvectorizer}},
\code{\link{mlr_pipeops_threshold}},
\code{\link{mlr_pipeops_tunethreshold}},
\code{\link{mlr_pipeops_unbranch}},
\code{\link{mlr_pipeops_updatetarget}},
\code{\link{mlr_pipeops_vtreat}},
\code{\link{mlr_pipeops_yeojohnson}},
\code{\link{mlr_pipeops}}
}
\concept{PipeOps}
