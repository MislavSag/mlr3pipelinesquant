% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpWinsorizeSimple.R
\name{PipeOpWinsorizeSimple}
\alias{PipeOpWinsorizeSimple}
\title{PipeOpWinsorizeSimple}
\description{
\code{PipeOpWinsorizeSimple} is an R6 class inheriting from \code{PipeOpTaskPreprocSimple}. It applies
winsorization to numeric features of a dataset by limiting extreme values based on specified quantiles.
}
\section{Construction}{


\if{html}{\out{<div class="sourceCode">}}\preformatted{PipeOpWinsorizeSimple$new(id = "winsorization", param_vals = list())
}\if{html}{\out{</div>}}
\itemize{
\item \code{id} :: \code{character(1)}\cr
Identifier of resulting object, default \code{"winsorization"}.
\item \code{param_vals} :: named \code{list}\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would otherwise be set during construction. Default \code{list()}.
}
}

\section{Parameters}{

The parameters are:
\itemize{
\item \code{probs_low} :: \code{numeric(1)}\cr
Lower quantile probability for winsorization. Default is 0.05.
\item \code{probs_high} :: \code{numeric(1)}\cr
Upper quantile probability for winsorization. Default is 0.95.
\item \code{na.rm} :: \code{logical(1)}\cr
Whether to remove NA values in the computation of quantiles. Default is TRUE.
\item \code{qtype} :: \code{integer(1)}\cr
Type of quantile calculation. Default is 7 (see \code{?quantile} for types).
}
}

\section{Input and Output Channels}{

Input and output channels are inherited from \code{PipeOpTaskPreprocSimple}.

The output is the input \code{\link[mlr3:Task]{Task}} with numeric features winsorized based on the specified quantiles.
}

\section{State}{

The \verb{$state} is a named \code{list} containing:
\itemize{
\item \code{minvals} :: \code{numeric}\cr
The lower bound values for each feature calculated during training.
\item \code{maxvals} :: \code{numeric}\cr
The upper bound values for each feature calculated during training.
}
}

\section{Internals}{

The operator calculates the specified lower and upper quantiles for each feature and uses them
to limit extreme values during both training and prediction.
}

\section{Methods}{

Methods inherited from \code{PipeOpTaskPreprocSimple}.
}

\examples{
library("mlr3")

task = tsk("iris")
po_winsorize = PipeOpWinsorizeSimple$new()

po_winsorize$train(list(task))[[1]]$data()

}
\seealso{
Other PipeOps: 
\code{\link{PipeOpDropCorr}},
\code{\link{PipeOpDropNACol}},
\code{\link{PipeOpDropNA}},
\code{\link{PipeOpEnsemble}},
\code{\link{PipeOpImpute}},
\code{\link{PipeOpTargetTrafo}},
\code{\link{PipeOpTaskPreprocSimple}},
\code{\link{PipeOpTaskPreproc}},
\code{\link{PipeOpUniform}},
\code{\link{PipeOp}},
\code{\link{mlr_pipeops_boxcox}},
\code{\link{mlr_pipeops_branch}},
\code{\link{mlr_pipeops_chunk}},
\code{\link{mlr_pipeops_classbalancing}},
\code{\link{mlr_pipeops_classifavg}},
\code{\link{mlr_pipeops_classweights}},
\code{\link{mlr_pipeops_colapply}},
\code{\link{mlr_pipeops_collapsefactors}},
\code{\link{mlr_pipeops_colroles}},
\code{\link{mlr_pipeops_copy}},
\code{\link{mlr_pipeops_datefeatures}},
\code{\link{mlr_pipeops_encodeimpact}},
\code{\link{mlr_pipeops_encodelmer}},
\code{\link{mlr_pipeops_encode}},
\code{\link{mlr_pipeops_featureunion}},
\code{\link{mlr_pipeops_filter}},
\code{\link{mlr_pipeops_fixfactors}},
\code{\link{mlr_pipeops_histbin}},
\code{\link{mlr_pipeops_ica}},
\code{\link{mlr_pipeops_imputeconstant}},
\code{\link{mlr_pipeops_imputehist}},
\code{\link{mlr_pipeops_imputelearner}},
\code{\link{mlr_pipeops_imputemean}},
\code{\link{mlr_pipeops_imputemedian}},
\code{\link{mlr_pipeops_imputemode}},
\code{\link{mlr_pipeops_imputeoor}},
\code{\link{mlr_pipeops_imputesample}},
\code{\link{mlr_pipeops_kernelpca}},
\code{\link{mlr_pipeops_learner}},
\code{\link{mlr_pipeops_missind}},
\code{\link{mlr_pipeops_modelmatrix}},
\code{\link{mlr_pipeops_multiplicityexply}},
\code{\link{mlr_pipeops_multiplicityimply}},
\code{\link{mlr_pipeops_mutate}},
\code{\link{mlr_pipeops_nmf}},
\code{\link{mlr_pipeops_nop}},
\code{\link{mlr_pipeops_ovrsplit}},
\code{\link{mlr_pipeops_ovrunite}},
\code{\link{mlr_pipeops_pca}},
\code{\link{mlr_pipeops_proxy}},
\code{\link{mlr_pipeops_quantilebin}},
\code{\link{mlr_pipeops_randomprojection}},
\code{\link{mlr_pipeops_randomresponse}},
\code{\link{mlr_pipeops_regravg}},
\code{\link{mlr_pipeops_removeconstants}},
\code{\link{mlr_pipeops_renamecolumns}},
\code{\link{mlr_pipeops_replicate}},
\code{\link{mlr_pipeops_scalemaxabs}},
\code{\link{mlr_pipeops_scalerange}},
\code{\link{mlr_pipeops_scale}},
\code{\link{mlr_pipeops_select}},
\code{\link{mlr_pipeops_smote}},
\code{\link{mlr_pipeops_spatialsign}},
\code{\link{mlr_pipeops_subsample}},
\code{\link{mlr_pipeops_targetinvert}},
\code{\link{mlr_pipeops_targetmutate}},
\code{\link{mlr_pipeops_targettrafoscalerange}},
\code{\link{mlr_pipeops_textvectorizer}},
\code{\link{mlr_pipeops_threshold}},
\code{\link{mlr_pipeops_tunethreshold}},
\code{\link{mlr_pipeops_unbranch}},
\code{\link{mlr_pipeops_updatetarget}},
\code{\link{mlr_pipeops_vtreat}},
\code{\link{mlr_pipeops_yeojohnson}},
\code{\link{mlr_pipeops}}
}
\concept{PipeOps}
